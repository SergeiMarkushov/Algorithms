0) Асимптотика - что это, как считается, зачем нужно.

В дальнейшем про все темы будет подразумеваться,
что для базовых операций каждой структуры /
каждого алгоритма надо знать и понимать их асимптотику и почему она такая.

Используемые обозначения:
edu - это раздел EDU на codeforces.com
emaxx - e-maxx.ru/algo


1) Типы данных
1.0) Вместимость и размер типа - биты, байты, ...
1.1) Логический тип данных
1.1.1) Логические операции - AND (&&), OR (||) , XOR (^), NOT (!)
1.1.1.1) Особенность вычисления операций AND и OR
1.1.2) Занимаемый объем - что такое "размер машинного слова"?
1.2) Целочисленные типы данных - 8/16/32/64 бита
1.2.1) Знаковый и беззнаковый типы
1.2.1.1) Представление отрицательных чисел в дополнительном (кажется так) коде
1.2.2) Переполнение результата операции
1.2.3) Побитовые операции - AND (&), OR (|), XOR (^), NOT (~)
1.2.3.1) Отличие от логических операций
1.3) Вещественные типы данных - 32/64 бита
1.3.1) Представление данных - знак, порядок, мантисса
1.3.2) Реальная вместимость - сравнение с 64-битным целочисленным типом
1.3.3) Точность вычислений - важность порядка операций
1.3.4) Особые значения - свойства, способы получения, способы хранения
1.3.4.1) Бесконечности
1.3.4.2) NaN
1.3.5) (опционально) денормированные (кажется так) вещественные числа - причем тут ноль?
1.4) Символы и строки
1.4.1) Таблицы ASCII и Unicode
1.4.2) Символ как целочисленный тип
1.4.3) Операции над строками - индексация, подстрока, поиск подстроки

2) Рекурсия - что это?
2.1) Системный стек - причем он тут? что случится, если рекурсия будет бесконечной?
2.2) Хвостовая рекурсия - что это, как она может быть оптимизирована?

3) Сортировки -
3.0) (опционально) квадратичные - пузырек, вставкой, выборкой.
Надо явно понимать, что в работе ты их применять не будешь, но общие концепции могут быть полезны
3.1) быстрая / слиянием - как работают, плюсы и минусы каждой;
3.1.1) Принцип "разделяй и властвуй" - общее понимание, что это и как он проявляется в этих сортировках
3.2) Сортировка подсчетом - что это, когда применима?
3.3) встроенные сортировки
3.3.1) компаратор - что это, какие свойства и требования?

4) Встроенные структуры данных - везде тут я буду говорить об абстрактных структурах,
не надо четко привязываться к реализации в языке, вопросы больше об общих концепциях
- НО в то же время знать детали реализации в твоём языке может быть полезно

4.1) вектор (список на массиве) - push_back / pop_back / find
4.1.1) строки как вектора символов - общее осознание связи и схожести операций;
P.S. в С++ у них есть общий предок basic_string (или как-то так), может быть интересно почитать
4.2) связный список (список на узлах) - плюсы и минусы по сравнению с вектором
4.3) стек - push/pop;
4.3.1) системный стек - почему область памяти так называется и что в ней хранится;
4.4) очередь (queue) / двунаправленная очередь (deque) - add / poll; в чем разница?
4.5) куча (heap / priority queue) - add / poll; условие кучи;
up/down - что за операции, как работают (опционально)
4.6) хеш-таблица
4.6.1) что такое хеш-функция - её свойства, требования;
4.6.2) открытая адресация и корзины; 3.6.3) амортизированная сложность операций;
4.7) двоичные деревья поиска - что это - основные свойства
P.S: общее понимание операций с деревьями - это теория графов,
может быть полезным для начала изучить 9.5 - или, наоборот, изучив деревья поиска,
будет сильно проще понять деревья в общем случае; может быть удобен любой порядок изучения,
сложно предсказать, как будет лучше и проще;

4.7.0) дополнительные операции - lower/upper_bound - что, зачем, почему, в чем разница?
4.7.1) требования к ключам;
4.7.2) что такое балансировка и самобалансировка, зачем они нужны;
4.7.3) в чем преимущество и недостатки перед хеш-таблицами;

В пунктах 4.6 и 4.7 надо понимать разницу между множеством /
 мультимножеством / словарём (ассоциативный массив) - именно на уровне абстракций,
 но и в чем заключается разница в реализации в твоём языке
5) Сортировка событий - по сути это обработка набора отрезков на прямой - emaxx
 5.1) Сжатие координат - что это и когда может быть полезно?

 6) Двоичный поиск
 6.0) принцип работы, необходимые требования к данным - edu
 6.1) Вещественный и целочисленный - важные отличия;
 6.2) встроенный в язык - lower_bound / upper_bound

 7) Два указателя - edu

 8) Префикс-суммы - edu

 9) Графы
 9.1) способы хранения (матрица / списки смежности) - edu
 9.2) поиск в глубину, ширину - emaxx
 9.3) Топологическая сортировка - еmaxx
 9.4) (опционально) Поиск циклов - вряд ли прям встретится, но понимать концепцию может быть полезно - еmaxx
 9.5) Деревья
 9.5.1) Определение - какой граф является деревом? Что такое листья?
 9.5.2) Полезные свойства деревьев по сравнению с обычными графами
 9.5.3) Обход дерева, сбор информации от детей;

 10) Динамическое программирование
 10.1) Что это и когда применимо;
 10.2) Линейная динамика
 10.3) Двумерная динамика - черепашка
 10.4) Опциональные продвинутые динамики
 10.4.1)  Динамика на подотрезках
 10.4.2) Расстояние редактирования (Левенштейна)